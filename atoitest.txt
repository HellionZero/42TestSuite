#include <stdio.h>
#include <stdlib.h>
#include <assert.h>

void test_atoi() {
    // Test 1: Basic positive integer
    assert(atoi("123") == 123);
    printf("Test 1 passed.\n");

    // Test 2: Basic negative integer
    assert(atoi("-456") == -456);
    printf("Test 2 passed.\n");

    // Test 3: Leading whitespace
    assert(atoi("   789") == 789);
    printf("Test 3 passed.\n");

    // Test 4: Leading zeros
    assert(atoi("000123") == 123);
    printf("Test 4 passed.\n");

    // Test 5: Positive sign
    assert(atoi("+123") == 123);
    printf("Test 5 passed.\n");

    // Test 6: Mixed whitespace and sign
    assert(atoi("   +456") == 456);
    printf("Test 6 passed.\n");

    // Test 7: Invalid characters after the number
    assert(atoi("123abc") == 123);
    printf("Test 7 passed.\n");

    // Test 8: Invalid characters before the number
    assert(atoi("abc123") == 0);
    printf("Test 8 passed.\n");

    // Test 9: Empty string
    assert(atoi("") == 0);
    printf("Test 9 passed.\n");

    // Test 10: Only whitespace
    assert(atoi("   ") == 0);
    printf("Test 10 passed.\n");

    // Test 11: Integer overflow (behavior is implementation-defined)
    // This test is more for awareness; actual behavior may vary.
    // assert(atoi("2147483648") == INT_MAX); // Assuming 32-bit int
    printf("Test 11 skipped (implementation-defined behavior).\n");

    // Test 12: Integer underflow (behavior is implementation-defined)
    // assert(atoi("-2147483649") == INT_MIN); // Assuming 32-bit int
    printf("Test 12 skipped (implementation-defined behavior).\n");

    // Test 13: Large number with valid format
    assert(atoi("2147483647") == 2147483647); // INT_MAX for 32-bit int
    printf("Test 13 passed.\n");
